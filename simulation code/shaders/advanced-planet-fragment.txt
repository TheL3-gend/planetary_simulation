#version 330 core

// Input data from vertex shader
in vec3 fragNormal;
in vec3 fragPosition;
in vec2 fragTexCoord;
in mat3 TBN;

// Output color
out vec4 fragColor;

// Texture uniforms
uniform sampler2D diffuseMap;    // Base texture (required)
uniform sampler2D normalMap;     // Normal map (optional)
uniform sampler2D specularMap;   // Specular map (optional)
uniform sampler2D nightMap;      // Night lights (optional, Earth)
uniform sampler2D cloudsMap;     // Cloud layer (optional, Earth, Jupiter)

// Material properties
uniform vec3 baseColor;
uniform float specularStrength;
uniform float shininess;

// Feature toggles
uniform bool useTexture;
uniform bool useNormalMap;
uniform bool useSpecularMap;
uniform bool useNightMap;
uniform bool useCloudsMap;
uniform bool isAtmospheric;      // For Venus, gas giants, etc.

// Light and view properties
uniform vec3 lightPos;
uniform vec3 viewPos;
uniform float ambientStrength;

// Time uniform for animations (clouds, etc.)
uniform float time;

// Constants
const float PI = 3.14159265359;

// Function prototypes
vec3 calcDirectLight(vec3 normal, vec3 viewDir, vec3 baseColor, float specularIntensity);
vec3 calcAtmosphericScattering(vec3 normal, vec3 viewDir, vec3 lightDir, vec3 baseColor);

void main() {
    // Sample diffuse texture
    vec3 diffuseColor;
    if (useTexture) {
        diffuseColor = texture(diffuseMap, fragTexCoord).rgb;
    } else {
        diffuseColor = baseColor;
    }
    
    // View direction
    vec3 viewDir = normalize(viewPos - fragPosition);
    
    // Calculate normal
    vec3 normal;
    if (useNormalMap) {
        // Sample normal map and convert to [-1, 1] range
        vec3 normalColor = texture(normalMap, fragTexCoord).rgb * 2.0 - 1.0;
        normal = normalize(TBN * normalColor);
    } else {
        normal = normalize(fragNormal);
    }
    
    // Get specular intensity from map or use default
    float specularIntensity = specularStrength;
    if (useSpecularMap) {
        specularIntensity *= texture(specularMap, fragTexCoord).r;
    }
    
    // Calculate direct lighting
    vec3 result = calcDirectLight(normal, viewDir, diffuseColor, specularIntensity);
    
    // Add atmospheric effects if applicable
    if (isAtmospheric) {
        vec3 lightDir = normalize(lightPos - fragPosition);
        vec3 atmosphericEffect = calcAtmosphericScattering(normal, viewDir, lightDir, diffuseColor);
        result = mix(result, atmosphericEffect, 0.5);
    }
    
    // Add cloud layer if available
    if (useCloudsMap) {
        // Sample cloud texture with slight animation
        vec2 cloudTexCoord = fragTexCoord;
        cloudTexCoord.x = mod(cloudTexCoord.x + time * 0.005, 1.0);
        vec4 cloudsColor = texture(cloudsMap, cloudTexCoord);
        
        // Light direction for cloud shadows
        vec3 lightDir = normalize(lightPos - fragPosition);
        float cloudShadow = max(dot(normal, lightDir), 0.0);
        
        // Mix clouds with base color
        result = mix(result, cloudsColor.rgb, cloudsColor.a * 0.5);
    }
    
    // Add night lights for Earth
    if (useNightMap) {
        vec3 lightDir = normalize(lightPos - fragPosition);
        float nightFactor = 1.0 - max(dot(normal, lightDir), 0.0);
        nightFactor = smoothstep(0.3, 0.7, nightFactor);
        
        vec3 nightColor = texture(nightMap, fragTexCoord).rgb;
        result = mix(result, nightColor, nightFactor * 0.8);
    }
    
    // Final color with full opacity
    fragColor = vec4(result, 1.0);
}

vec3 calcDirectLight(vec3 normal, vec3 viewDir, vec3 baseColor, float specularIntensity) {
    // Light direction
    vec3 lightDir = normalize(lightPos - fragPosition);
    
    // Ambient component
    vec3 ambient = ambientStrength * baseColor;
    
    // Diffuse component
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 diffuse = diff * baseColor;
    
    // Specular component (Blinn-Phong)
    vec3 halfwayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(normal, halfwayDir), 0.0), shininess);
    vec3 specular = specularIntensity * spec * vec3(1.0);
    
    // Combine lighting components
    return ambient + diffuse + specular;
}

vec3 calcAtmosphericScattering(vec3 normal, vec3 viewDir, vec3 lightDir, vec3 baseColor) {
    // Simple atmospheric scattering approximation
    float VdotL = max(dot(viewDir, -lightDir), 0.0);
    float NdotL = max(dot(normal, lightDir), 0.0);
    
    // Edge glow (Fresnel-like effect)
    float fresnel = pow(1.0 - max(dot(normal, viewDir), 0.0), 4.0);
    
    // Atmospheric color based on base color
    vec3 atmosphericColor = mix(baseColor, vec3(0.7, 0.8, 1.0), 0.5);
    
    // Combine atmospheric effects
    vec3 atmosphere = mix(baseColor * NdotL, atmosphericColor, fresnel * 0.6);
    
    return atmosphere;
}
